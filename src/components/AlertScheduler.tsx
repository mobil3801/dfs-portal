import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { Calendar, Clock, Plus, Edit, Trash2, Play, Pause, Loader2, AlertTriangle } from 'lucide-react';\nimport { smsService } from '@/services/smsService';\n\ninterface AlertSchedule {\n  ID?: number;\n  schedule_name: string;\n  alert_type: string;\n  days_before_expiry: number;\n  frequency_days: number;\n  template_id: number;\n  is_active: boolean;\n  last_run?: string;\n  next_run?: string;\n  station_filter: string;\n  created_by?: number;\n}\n\ninterface SMSTemplate {\n  ID: number;\n  template_name: string;\n  template_type: string;\n  is_active: boolean;\n}\n\ninterface License {\n  ID: number;\n  license_name: string;\n  expiry_date: string;\n  station: string;\n  status: string;\n}\n\nconst ALERT_TYPES = [\n  'License Expiry',\n  'Inventory Alert',\n  'Payment Reminder',\n  'Delivery Notification',\n  'Emergency Alert'\n];\n\nconst STATION_OPTIONS = [\n  'ALL',\n  'MOBIL',\n  'AMOCO ROSEDALE',\n  'AMOCO BROOKLYN'\n];\n\nconst AlertScheduler: React.FC = () => {\n  const [schedules, setSchedules] = useState<AlertSchedule[]>([]);\n  const [templates, setTemplates] = useState<SMSTemplate[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [editingSchedule, setEditingSchedule] = useState<AlertSchedule | null>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [isRunning, setIsRunning] = useState<number | null>(null);\n  const { toast } = useToast();\n\n  const [newSchedule, setNewSchedule] = useState<AlertSchedule>({\n    schedule_name: '',\n    alert_type: 'License Expiry',\n    days_before_expiry: 30,\n    frequency_days: 7,\n    template_id: 0,\n    is_active: true,\n    station_filter: 'ALL'\n  });\n\n  useEffect(() => {\n    loadSchedules();\n    loadTemplates();\n  }, []);\n\n  const loadSchedules = async () => {\n    setIsLoading(true);\n    try {\n      const { data, error } = await window.ezsite.apis.tablePage(12642, {\n        PageNo: 1,\n        PageSize: 100,\n        OrderByField: 'ID',\n        IsAsc: false,\n        Filters: []\n      });\n\n      if (error) throw new Error(error);\n      \n      if (data?.List) {\n        setSchedules(data.List);\n      }\n    } catch (error) {\n      console.error('Error loading schedules:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load alert schedules',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadTemplates = async () => {\n    try {\n      const { data, error } = await window.ezsite.apis.tablePage(12641, {\n        PageNo: 1,\n        PageSize: 100,\n        OrderByField: 'ID',\n        IsAsc: false,\n        Filters: [{ name: 'is_active', op: 'Equal', value: true }]\n      });\n\n      if (error) throw new Error(error);\n      \n      if (data?.List) {\n        setTemplates(data.List);\n      }\n    } catch (error) {\n      console.error('Error loading templates:', error);\n    }\n  };\n\n  const saveSchedule = async () => {\n    const schedule = editingSchedule || newSchedule;\n    \n    if (!schedule.schedule_name || !schedule.template_id) {\n      toast({\n        title: 'Error',\n        description: 'Please fill in all required fields',\n        variant: 'destructive'\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      // Calculate next run time\n      const nextRun = new Date();\n      nextRun.setHours(9, 0, 0, 0); // Run at 9 AM\n      if (nextRun <= new Date()) {\n        nextRun.setDate(nextRun.getDate() + 1); // If past 9 AM today, schedule for tomorrow\n      }\n\n      const scheduleData = {\n        schedule_name: schedule.schedule_name,\n        alert_type: schedule.alert_type,\n        days_before_expiry: schedule.days_before_expiry,\n        frequency_days: schedule.frequency_days,\n        template_id: schedule.template_id,\n        is_active: schedule.is_active,\n        next_run: nextRun.toISOString(),\n        station_filter: schedule.station_filter,\n        created_by: 1 // This should be the current user ID\n      };\n\n      if (editingSchedule?.ID) {\n        const { error } = await window.ezsite.apis.tableUpdate(12642, {\n          ID: editingSchedule.ID,\n          ...scheduleData\n        });\n        if (error) throw new Error(error);\n        \n        toast({\n          title: 'Success',\n          description: 'Schedule updated successfully'\n        });\n      } else {\n        const { error } = await window.ezsite.apis.tableCreate(12642, scheduleData);\n        if (error) throw new Error(error);\n        \n        toast({\n          title: 'Success',\n          description: 'Schedule created successfully'\n        });\n      }\n\n      setIsDialogOpen(false);\n      setEditingSchedule(null);\n      setNewSchedule({\n        schedule_name: '',\n        alert_type: 'License Expiry',\n        days_before_expiry: 30,\n        frequency_days: 7,\n        template_id: 0,\n        is_active: true,\n        station_filter: 'ALL'\n      });\n      \n      await loadSchedules();\n    } catch (error) {\n      console.error('Error saving schedule:', error);\n      toast({\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Failed to save schedule',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const deleteSchedule = async (scheduleId: number) => {\n    try {\n      const { error } = await window.ezsite.apis.tableDelete(12642, { ID: scheduleId });\n      if (error) throw new Error(error);\n      \n      toast({\n        title: 'Success',\n        description: 'Schedule deleted successfully'\n      });\n      \n      await loadSchedules();\n    } catch (error) {\n      console.error('Error deleting schedule:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to delete schedule',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  const toggleSchedule = async (schedule: AlertSchedule) => {\n    try {\n      const { error } = await window.ezsite.apis.tableUpdate(12642, {\n        ID: schedule.ID!,\n        is_active: !schedule.is_active\n      });\n      if (error) throw new Error(error);\n      \n      toast({\n        title: 'Success',\n        description: `Schedule ${!schedule.is_active ? 'activated' : 'deactivated'}`,\n      });\n      \n      await loadSchedules();\n    } catch (error) {\n      console.error('Error toggling schedule:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to update schedule status',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  const runScheduleNow = async (schedule: AlertSchedule) => {\n    if (!schedule.ID) return;\n    \n    setIsRunning(schedule.ID);\n    try {\n      await processLicenseExpiryAlerts(schedule);\n      \n      // Update last run time\n      await window.ezsite.apis.tableUpdate(12642, {\n        ID: schedule.ID,\n        last_run: new Date().toISOString()\n      });\n      \n      toast({\n        title: 'Success',\n        description: 'Schedule executed successfully'\n      });\n      \n      await loadSchedules();\n    } catch (error) {\n      console.error('Error running schedule:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to execute schedule',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsRunning(null);\n    }\n  };\n\n  const processLicenseExpiryAlerts = async (schedule: AlertSchedule) => {\n    try {\n      // Get licenses that are expiring within the specified days\n      const { data, error } = await window.ezsite.apis.tablePage(11731, {\n        PageNo: 1,\n        PageSize: 100,\n        OrderByField: 'expiry_date',\n        IsAsc: true,\n        Filters: [\n          { name: 'status', op: 'Equal', value: 'Active' },\n          ...(schedule.station_filter !== 'ALL' ? [{ name: 'station', op: 'Equal', value: schedule.station_filter }] : [])\n        ]\n      });\n\n      if (error) throw new Error(error);\n      \n      if (data?.List) {\n        const licenses = data.List.filter((license: License) => {\n          const expiryDate = new Date(license.expiry_date);\n          const today = new Date();\n          const daysUntilExpiry = Math.ceil((expiryDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n          \n          return daysUntilExpiry <= schedule.days_before_expiry && daysUntilExpiry > 0;\n        });\n\n        // Get contacts for the stations\n        const { data: contactsData } = await window.ezsite.apis.tablePage(12612, {\n          PageNo: 1,\n          PageSize: 100,\n          OrderByField: 'ID',\n          IsAsc: false,\n          Filters: [{ name: 'is_active', op: 'Equal', value: true }]\n        });\n\n        if (contactsData?.List) {\n          for (const license of licenses) {\n            const relevantContacts = contactsData.List.filter((contact: any) => \n              contact.station === 'ALL' || contact.station === license.station\n            );\n\n            for (const contact of relevantContacts) {\n              const expiryDate = new Date(license.expiry_date);\n              const today = new Date();\n              const daysRemaining = Math.ceil((expiryDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n              \n              await smsService.sendSMS({\n                to: contact.mobile_number,\n                message: '',\n                templateId: schedule.template_id,\n                placeholders: {\n                  license_name: license.license_name,\n                  station: license.station,\n                  expiry_date: expiryDate.toLocaleDateString(),\n                  days_remaining: daysRemaining.toString(),\n                  license_number: license.license_number || 'N/A'\n                }\n              });\n\n              // Log the alert\n              await window.ezsite.apis.tableCreate(12613, {\n                license_id: license.ID,\n                contact_id: contact.ID,\n                mobile_number: contact.mobile_number,\n                days_before_expiry: daysRemaining,\n                sent_date: new Date().toISOString(),\n                delivery_status: 'Sent',\n                created_by: 1\n              });\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error processing license expiry alerts:', error);\n      throw error;\n    }\n  };\n\n  const formatDateTime = (dateString?: string) => {\n    if (!dateString) return 'Never';\n    return new Date(dateString).toLocaleString();\n  };\n\n  const getTemplateName = (templateId: number) => {\n    const template = templates.find(t => t.ID === templateId);\n    return template ? template.template_name : 'Unknown Template';\n  };\n\n  const isScheduleOverdue = (schedule: AlertSchedule) => {\n    if (!schedule.next_run) return false;\n    return new Date(schedule.next_run) < new Date();\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5\" />\n                Automated Alert Scheduler\n              </CardTitle>\n              <CardDescription>\n                Configure automated SMS alerts for license expiry and other important events\n              </CardDescription>\n            </div>\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button onClick={() => {\n                  setEditingSchedule(null);\n                  setNewSchedule({\n                    schedule_name: '',\n                    alert_type: 'License Expiry',\n                    days_before_expiry: 30,\n                    frequency_days: 7,\n                    template_id: 0,\n                    is_active: true,\n                    station_filter: 'ALL'\n                  });\n                }}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Schedule\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-lg\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingSchedule ? 'Edit Schedule' : 'Create New Schedule'}\n                  </DialogTitle>\n                  <DialogDescription>\n                    Configure an automated alert schedule for SMS notifications.\n                  </DialogDescription>\n                </DialogHeader>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"schedule_name\">Schedule Name *</Label>\n                    <Input\n                      id=\"schedule_name\"\n                      placeholder=\"Enter schedule name\"\n                      value={editingSchedule?.schedule_name || newSchedule.schedule_name}\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        if (editingSchedule) {\n                          setEditingSchedule({ ...editingSchedule, schedule_name: value });\n                        } else {\n                          setNewSchedule({ ...newSchedule, schedule_name: value });\n                        }\n                      }}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"alert_type\">Alert Type</Label>\n                    <Select\n                      value={editingSchedule?.alert_type || newSchedule.alert_type}\n                      onValueChange={(value) => {\n                        if (editingSchedule) {\n                          setEditingSchedule({ ...editingSchedule, alert_type: value });\n                        } else {\n                          setNewSchedule({ ...newSchedule, alert_type: value });\n                        }\n                      }}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {ALERT_TYPES.map(type => (\n                          <SelectItem key={type} value={type}>{type}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"days_before_expiry\">Days Before Expiry</Label>\n                      <Input\n                        id=\"days_before_expiry\"\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"365\"\n                        value={editingSchedule?.days_before_expiry || newSchedule.days_before_expiry}\n                        onChange={(e) => {\n                          const value = parseInt(e.target.value) || 30;\n                          if (editingSchedule) {\n                            setEditingSchedule({ ...editingSchedule, days_before_expiry: value });\n                          } else {\n                            setNewSchedule({ ...newSchedule, days_before_expiry: value });\n                          }\n                        }}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"frequency_days\">Frequency (Days)</Label>\n                      <Input\n                        id=\"frequency_days\"\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"30\"\n                        value={editingSchedule?.frequency_days || newSchedule.frequency_days}\n                        onChange={(e) => {\n                          const value = parseInt(e.target.value) || 7;\n                          if (editingSchedule) {\n                            setEditingSchedule({ ...editingSchedule, frequency_days: value });\n                          } else {\n                            setNewSchedule({ ...newSchedule, frequency_days: value });\n                          }\n                        }}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"template_id\">SMS Template *</Label>\n                    <Select\n                      value={(editingSchedule?.template_id || newSchedule.template_id).toString()}\n                      onValueChange={(value) => {\n                        const templateId = parseInt(value);\n                        if (editingSchedule) {\n                          setEditingSchedule({ ...editingSchedule, template_id: templateId });\n                        } else {\n                          setNewSchedule({ ...newSchedule, template_id: templateId });\n                        }\n                      }}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select a template\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {templates.map(template => (\n                          <SelectItem key={template.ID} value={template.ID.toString()}>\n                            {template.template_name} ({template.template_type})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"station_filter\">Station Filter</Label>\n                    <Select\n                      value={editingSchedule?.station_filter || newSchedule.station_filter}\n                      onValueChange={(value) => {\n                        if (editingSchedule) {\n                          setEditingSchedule({ ...editingSchedule, station_filter: value });\n                        } else {\n                          setNewSchedule({ ...newSchedule, station_filter: value });\n                        }\n                      }}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {STATION_OPTIONS.map(station => (\n                          <SelectItem key={station} value={station}>{station}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"is_active\"\n                      checked={editingSchedule?.is_active ?? newSchedule.is_active}\n                      onCheckedChange={(checked) => {\n                        if (editingSchedule) {\n                          setEditingSchedule({ ...editingSchedule, is_active: checked });\n                        } else {\n                          setNewSchedule({ ...newSchedule, is_active: checked });\n                        }\n                      }}\n                    />\n                    <Label htmlFor=\"is_active\">Active Schedule</Label>\n                  </div>\n\n                  <div className=\"flex justify-end gap-2\">\n                    <Button variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                      Cancel\n                    </Button>\n                    <Button onClick={saveSchedule} disabled={isLoading}>\n                      {isLoading && <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />}\n                      {editingSchedule ? 'Update' : 'Create'} Schedule\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"border rounded-lg\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Schedule Name</TableHead>\n                    <TableHead>Type</TableHead>\n                    <TableHead>Template</TableHead>\n                    <TableHead>Station</TableHead>\n                    <TableHead>Frequency</TableHead>\n                    <TableHead>Next Run</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {schedules.map((schedule) => (\n                    <TableRow key={schedule.ID}>\n                      <TableCell className=\"font-medium\">\n                        <div className=\"flex items-center gap-2\">\n                          {schedule.schedule_name}\n                          {isScheduleOverdue(schedule) && (\n                            <AlertTriangle className=\"h-4 w-4 text-orange-500\" />\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">\n                          {schedule.alert_type}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-sm\">\n                        {getTemplateName(schedule.template_id)}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"secondary\">\n                          {schedule.station_filter}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        Every {schedule.frequency_days} day{schedule.frequency_days !== 1 ? 's' : ''}\n                      </TableCell>\n                      <TableCell className=\"text-sm\">\n                        {formatDateTime(schedule.next_run)}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={schedule.is_active ? \"secondary\" : \"outline\"}>\n                          {schedule.is_active ? 'Active' : 'Inactive'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => schedule.ID && runScheduleNow(schedule)}\n                            disabled={isRunning === schedule.ID}\n                          >\n                            {isRunning === schedule.ID ? (\n                              <Loader2 className=\"h-3 w-3 animate-spin\" />\n                            ) : (\n                              <Play className=\"h-3 w-3\" />\n                            )}\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => toggleSchedule(schedule)}\n                          >\n                            {schedule.is_active ? (\n                              <Pause className=\"h-3 w-3\" />\n                            ) : (\n                              <Play className=\"h-3 w-3\" />\n                            )}\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setEditingSchedule(schedule);\n                              setIsDialogOpen(true);\n                            }}\n                          >\n                            <Edit className=\"h-3 w-3\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => schedule.ID && deleteSchedule(schedule.ID)}\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                  {schedules.length === 0 && (\n                    <TableRow>\n                      <TableCell colSpan={8} className=\"text-center py-8\">\n                        <div className=\"text-gray-500\">\n                          No alert schedules configured yet\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default AlertScheduler;