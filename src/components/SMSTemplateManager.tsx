import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { useToast } from '@/hooks/use-toast';
import { MessageSquare, Plus, Edit, Trash2, Eye, Copy, Loader2, AlertCircle } from 'lucide-react';

interface SMSTemplate {
  ID?: number;
  template_name: string;
  template_type: string;
  message_content: string;
  is_active: boolean;
  priority_level: string;
  character_count: number;
  created_by?: number;
}

interface SMSTemplateManagerProps {
  onTemplateSelected?: (template: SMSTemplate) => void;
}

const TEMPLATE_TYPES = [
  'License Expiry',
  'Inventory Alert',
  'Payment Reminder',
  'Delivery Notification',
  'Emergency Alert',
  'General Notification'
];

const PRIORITY_LEVELS = [
  'Low',
  'Medium',
  'High',
  'Critical'
];

const PLACEHOLDERS = {
  'License Expiry': [
    '{license_name}',
    '{station}',
    '{expiry_date}',
    '{days_remaining}',
    '{license_number}',
    '{renewal_url}'
  ],
  'Inventory Alert': [
    '{product_name}',
    '{station}',
    '{current_stock}',
    '{minimum_stock}',
    '{reorder_date}'
  ],
  'Payment Reminder': [
    '{vendor_name}',
    '{amount}',
    '{due_date}',
    '{invoice_number}',
    '{days_overdue}'
  ],
  'Delivery Notification': [
    '{delivery_date}',
    '{station}',
    '{product_type}',
    '{quantity}',
    '{bol_number}'
  ],
  'Emergency Alert': [
    '{alert_type}',
    '{station}',
    '{timestamp}',
    '{contact_info}',
    '{action_required}'
  ],
  'General Notification': [
    '{recipient_name}',
    '{station}',
    '{date}',
    '{message_details}',
    '{contact_info}'
  ]\n};\n\nconst SMSTemplateManager: React.FC<SMSTemplateManagerProps> = ({ onTemplateSelected }) => {\n  const [templates, setTemplates] = useState<SMSTemplate[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [editingTemplate, setEditingTemplate] = useState<SMSTemplate | null>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [previewTemplate, setPreviewTemplate] = useState<SMSTemplate | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const { toast } = useToast();\n\n  const [newTemplate, setNewTemplate] = useState<SMSTemplate>({\n    template_name: '',\n    template_type: 'License Expiry',\n    message_content: '',\n    is_active: true,\n    priority_level: 'Medium',\n    character_count: 0\n  });\n\n  useEffect(() => {\n    loadTemplates();\n  }, []);\n\n  useEffect(() => {\n    // Update character count when message content changes\n    if (editingTemplate) {\n      setEditingTemplate(prev => prev ? {\n        ...prev,\n        character_count: prev.message_content.length\n      } : null);\n    } else {\n      setNewTemplate(prev => ({\n        ...prev,\n        character_count: prev.message_content.length\n      }));\n    }\n  }, [editingTemplate?.message_content, newTemplate.message_content]);\n\n  const loadTemplates = async () => {\n    setIsLoading(true);\n    try {\n      const { data, error } = await window.ezsite.apis.tablePage(12641, {\n        PageNo: 1,\n        PageSize: 100,\n        OrderByField: 'ID',\n        IsAsc: false,\n        Filters: []\n      });\n\n      if (error) throw new Error(error);\n      \n      if (data?.List) {\n        setTemplates(data.List);\n      }\n    } catch (error) {\n      console.error('Error loading templates:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load SMS templates',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const saveTemplate = async () => {\n    const template = editingTemplate || newTemplate;\n    \n    if (!template.template_name || !template.message_content) {\n      toast({\n        title: 'Error',\n        description: 'Please fill in all required fields',\n        variant: 'destructive'\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const templateData = {\n        template_name: template.template_name,\n        template_type: template.template_type,\n        message_content: template.message_content,\n        is_active: template.is_active,\n        priority_level: template.priority_level,\n        character_count: template.message_content.length,\n        created_by: 1 // This should be the current user ID\n      };\n\n      if (editingTemplate?.ID) {\n        const { error } = await window.ezsite.apis.tableUpdate(12641, {\n          ID: editingTemplate.ID,\n          ...templateData\n        });\n        if (error) throw new Error(error);\n        \n        toast({\n          title: 'Success',\n          description: 'Template updated successfully'\n        });\n      } else {\n        const { error } = await window.ezsite.apis.tableCreate(12641, templateData);\n        if (error) throw new Error(error);\n        \n        toast({\n          title: 'Success',\n          description: 'Template created successfully'\n        });\n      }\n\n      setIsDialogOpen(false);\n      setEditingTemplate(null);\n      setNewTemplate({\n        template_name: '',\n        template_type: 'License Expiry',\n        message_content: '',\n        is_active: true,\n        priority_level: 'Medium',\n        character_count: 0\n      });\n      \n      await loadTemplates();\n    } catch (error) {\n      console.error('Error saving template:', error);\n      toast({\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Failed to save template',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const deleteTemplate = async (templateId: number) => {\n    try {\n      const { error } = await window.ezsite.apis.tableDelete(12641, { ID: templateId });\n      if (error) throw new Error(error);\n      \n      toast({\n        title: 'Success',\n        description: 'Template deleted successfully'\n      });\n      \n      await loadTemplates();\n    } catch (error) {\n      console.error('Error deleting template:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to delete template',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  const duplicateTemplate = (template: SMSTemplate) => {\n    setNewTemplate({\n      template_name: `${template.template_name} (Copy)`,\n      template_type: template.template_type,\n      message_content: template.message_content,\n      is_active: template.is_active,\n      priority_level: template.priority_level,\n      character_count: template.character_count\n    });\n    setEditingTemplate(null);\n    setIsDialogOpen(true);\n  };\n\n  const insertPlaceholder = (placeholder: string) => {\n    const template = editingTemplate || newTemplate;\n    const newContent = template.message_content + placeholder;\n    \n    if (editingTemplate) {\n      setEditingTemplate({\n        ...editingTemplate,\n        message_content: newContent\n      });\n    } else {\n      setNewTemplate({\n        ...newTemplate,\n        message_content: newContent\n      });\n    }\n  };\n\n  const previewTemplateWithSampleData = (template: SMSTemplate): string => {\n    let preview = template.message_content;\n    const sampleData: Record<string, string> = {\n      '{license_name}': 'Business License',\n      '{station}': 'MOBIL',\n      '{expiry_date}': '2024-12-31',\n      '{days_remaining}': '15',\n      '{license_number}': 'BL-2024-001',\n      '{renewal_url}': 'https://example.com/renew',\n      '{product_name}': 'Regular Gas',\n      '{current_stock}': '150',\n      '{minimum_stock}': '500',\n      '{reorder_date}': '2024-03-15',\n      '{vendor_name}': 'ABC Suppliers',\n      '{amount}': '$1,250.00',\n      '{due_date}': '2024-03-20',\n      '{invoice_number}': 'INV-2024-001',\n      '{days_overdue}': '5',\n      '{delivery_date}': '2024-03-10',\n      '{product_type}': 'Fuel Delivery',\n      '{quantity}': '5000 gallons',\n      '{bol_number}': 'BOL-2024-001',\n      '{alert_type}': 'Equipment Failure',\n      '{timestamp}': '2024-03-10 14:30',\n      '{contact_info}': '+1-555-0123',\n      '{action_required}': 'Immediate attention required',\n      '{recipient_name}': 'John Doe',\n      '{date}': '2024-03-10',\n      '{message_details}': 'Monthly report available'\n    };\n\n    Object.entries(sampleData).forEach(([placeholder, value]) => {\n      preview = preview.replace(new RegExp(placeholder.replace(/[{}]/g, '\\\\$&'), 'g'), value);\n    });\n\n    return preview;\n  };\n\n  const filteredTemplates = templates.filter(template =>\n    template.template_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    template.template_type.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    template.message_content.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'Critical': return 'bg-red-100 text-red-800';\n      case 'High': return 'bg-orange-100 text-orange-800';\n      case 'Medium': return 'bg-blue-100 text-blue-800';\n      case 'Low': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MessageSquare className=\"h-5 w-5\" />\n                SMS Message Templates\n              </CardTitle>\n              <CardDescription>\n                Create and manage customizable SMS templates for different alert types\n              </CardDescription>\n            </div>\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button onClick={() => {\n                  setEditingTemplate(null);\n                  setNewTemplate({\n                    template_name: '',\n                    template_type: 'License Expiry',\n                    message_content: '',\n                    is_active: true,\n                    priority_level: 'Medium',\n                    character_count: 0\n                  });\n                }}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Template\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingTemplate ? 'Edit Template' : 'Create New Template'}\n                  </DialogTitle>\n                  <DialogDescription>\n                    Design a customizable SMS template with placeholders for dynamic content.\n                  </DialogDescription>\n                </DialogHeader>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"template_name\">Template Name *</Label>\n                      <Input\n                        id=\"template_name\"\n                        placeholder=\"Enter template name\"\n                        value={editingTemplate?.template_name || newTemplate.template_name}\n                        onChange={(e) => {\n                          const value = e.target.value;\n                          if (editingTemplate) {\n                            setEditingTemplate({ ...editingTemplate, template_name: value });\n                          } else {\n                            setNewTemplate({ ...newTemplate, template_name: value });\n                          }\n                        }}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"template_type\">Template Type</Label>\n                      <Select\n                        value={editingTemplate?.template_type || newTemplate.template_type}\n                        onValueChange={(value) => {\n                          if (editingTemplate) {\n                            setEditingTemplate({ ...editingTemplate, template_type: value });\n                          } else {\n                            setNewTemplate({ ...newTemplate, template_type: value });\n                          }\n                        }}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {TEMPLATE_TYPES.map(type => (\n                            <SelectItem key={type} value={type}>{type}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"priority_level\">Priority Level</Label>\n                    <Select\n                      value={editingTemplate?.priority_level || newTemplate.priority_level}\n                      onValueChange={(value) => {\n                        if (editingTemplate) {\n                          setEditingTemplate({ ...editingTemplate, priority_level: value });\n                        } else {\n                          setNewTemplate({ ...newTemplate, priority_level: value });\n                        }\n                      }}\n                    >\n                      <SelectTrigger className=\"w-48\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {PRIORITY_LEVELS.map(level => (\n                          <SelectItem key={level} value={level}>{level}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <Label htmlFor=\"message_content\">Message Content *</Label>\n                      <span className=\"text-sm text-gray-600\">\n                        {editingTemplate?.character_count || newTemplate.character_count} characters\n                      </span>\n                    </div>\n                    <Textarea\n                      id=\"message_content\"\n                      placeholder=\"Enter your SMS message with placeholders...\"\n                      rows={4}\n                      value={editingTemplate?.message_content || newTemplate.message_content}\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        if (editingTemplate) {\n                          setEditingTemplate({ ...editingTemplate, message_content: value });\n                        } else {\n                          setNewTemplate({ ...newTemplate, message_content: value });\n                        }\n                      }}\n                    />\n                    {(editingTemplate?.character_count || newTemplate.character_count) > 160 && (\n                      <div className=\"flex items-center gap-1 text-sm text-orange-600\">\n                        <AlertCircle className=\"h-3 w-3\" />\n                        Message exceeds 160 characters and may be split into multiple SMS\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label>Available Placeholders</Label>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {PLACEHOLDERS[editingTemplate?.template_type || newTemplate.template_type]?.map(placeholder => (\n                        <Button\n                          key={placeholder}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => insertPlaceholder(placeholder)}\n                        >\n                          {placeholder}\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"is_active\"\n                      checked={editingTemplate?.is_active || newTemplate.is_active}\n                      onCheckedChange={(checked) => {\n                        if (editingTemplate) {\n                          setEditingTemplate({ ...editingTemplate, is_active: checked });\n                        } else {\n                          setNewTemplate({ ...newTemplate, is_active: checked });\n                        }\n                      }}\n                    />\n                    <Label htmlFor=\"is_active\">Active Template</Label>\n                  </div>\n\n                  <div className=\"flex justify-end gap-2\">\n                    <Button variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                      Cancel\n                    </Button>\n                    <Button onClick={saveTemplate} disabled={isLoading}>\n                      {isLoading && <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />}\n                      {editingTemplate ? 'Update' : 'Create'} Template\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-4\">\n              <Input\n                placeholder=\"Search templates...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"max-w-sm\"\n              />\n              <Badge variant=\"outline\">\n                {filteredTemplates.length} template{filteredTemplates.length !== 1 ? 's' : ''}\n              </Badge>\n            </div>\n\n            <div className=\"border rounded-lg\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Type</TableHead>\n                    <TableHead>Priority</TableHead>\n                    <TableHead>Characters</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredTemplates.map((template) => (\n                    <TableRow key={template.ID}>\n                      <TableCell className=\"font-medium\">\n                        {template.template_name}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">\n                          {template.template_type}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={getPriorityColor(template.priority_level)}>\n                          {template.priority_level}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>{template.character_count}</TableCell>\n                      <TableCell>\n                        <Badge variant={template.is_active ? \"secondary\" : \"outline\"}>\n                          {template.is_active ? 'Active' : 'Inactive'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => setPreviewTemplate(template)}\n                          >\n                            <Eye className=\"h-3 w-3\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setEditingTemplate(template);\n                              setIsDialogOpen(true);\n                            }}\n                          >\n                            <Edit className=\"h-3 w-3\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => duplicateTemplate(template)}\n                          >\n                            <Copy className=\"h-3 w-3\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => template.ID && deleteTemplate(template.ID)}\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                  {filteredTemplates.length === 0 && (\n                    <TableRow>\n                      <TableCell colSpan={6} className=\"text-center py-8\">\n                        <div className=\"text-gray-500\">\n                          {searchTerm ? 'No templates match your search' : 'No templates created yet'}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Preview Dialog */}\n      <Dialog open={!!previewTemplate} onOpenChange={() => setPreviewTemplate(null)}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Template Preview</DialogTitle>\n            <DialogDescription>\n              Preview of \"{previewTemplate?.template_name}\" with sample data\n            </DialogDescription>\n          </DialogHeader>\n          \n          {previewTemplate && (\n            <div className=\"space-y-4\">\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <div className=\"text-sm text-gray-600 mb-2\">Original Template:</div>\n                <div className=\"font-mono text-sm\">{previewTemplate.message_content}</div>\n              </div>\n              \n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <div className=\"text-sm text-blue-600 mb-2\">Preview with Sample Data:</div>\n                <div className=\"text-sm\">{previewTemplateWithSampleData(previewTemplate)}</div>\n              </div>\n              \n              <div className=\"flex items-center justify-between text-sm text-gray-600\">\n                <span>Character Count: {previewTemplate.character_count}</span>\n                <span>SMS Parts: {Math.ceil(previewTemplate.character_count / 160)}</span>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default SMSTemplateManager;