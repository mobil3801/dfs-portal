import{O as t,aq as a,ar as e,as as r,at as s,au as y}from"./utilities-DMEd7dY0.js";const n=()=>d(new Date),d=t=>{const e=s(t,{weekStartsOn:0}),r=y(t,{weekStartsOn:0});return{startDate:e,endDate:r,payDate:a(r,1)}},o=t=>{let s;if(s="string"==typeof t?e(t):t,!r(s))throw new Error("Invalid pay period end date");return a(s,1)},u=(t,a)=>{const s=[];let y,n;try{y="string"==typeof t?e(t):t,n="string"==typeof a?e(a):a}catch{return{isValid:!1,errors:["Invalid date format"]}}r(y)&&r(n)||s.push("Invalid date values"),0!==y.getDay()&&s.push("Pay period must start on Sunday"),6!==n.getDay()&&s.push("Pay period must end on Saturday");return 6!==(n.getTime()-y.getTime())/864e5&&s.push("Pay period must be exactly 7 days (Sunday to Saturday)"),y>=n&&s.push("Start date must be before end date"),{isValid:0===s.length,errors:s}},i=a=>`${t(a.startDate,"MMM dd, yyyy")} - ${t(a.endDate,"MMM dd, yyyy")} (Pay: ${t(a.payDate,"MMM dd, yyyy")})`,p=a=>t(a,"yyyy-MM-dd"),l=(t=4,e=4)=>{const r=[],s=new Date;for(let n=t;n>0;n--){const t=a(s,-7*n),e=d(t);r.push({value:p(e.startDate),label:i(e),payPeriod:e})}const y=n();r.push({value:p(y.startDate),label:`Current: ${i(y)}`,payPeriod:y});for(let n=1;n<=e;n++){const t=a(s,7*n),e=d(t);r.push({value:p(e.startDate),label:i(e),payPeriod:e})}return r},D=t=>{const a="string"==typeof t?e(t):t;return r(a)?d(a):n()};export{p as a,l as b,D as c,o as d,i as f,n as g,u as v};
