import{y as e}from"./index-BJg4_aev.js";class t{static instance;initialized=!1;constructor(){this.initialize()}static getInstance(){return t.instance||(t.instance=new t),t.instance}async initialize(){try{const{data:t,error:s}=await e.auth.getSession();s&&console.warn("Supabase session check failed:",s.message),this.initialized=!0,console.log("SupabaseMigrationHelper initialized successfully")}catch(t){console.error("Failed to initialize SupabaseMigrationHelper:",t),this.initialized=!1}}async callApi(e,t,s){this.initialized||await this.initialize();try{switch(console.log(`Calling API endpoint: ${e} with ID: ${t}`,s),e){case"tablePage":return await this.handleTablePageRequest(t,s);case"migration":return await this.handleMigrationRequest(t,s);case"health":return await this.handleHealthCheck();default:return await this.handleGenericRequest(e,t,s)}}catch(a){return console.error("API call failed:",a),{success:!1,error:a.message||"Unknown API error",message:`Failed to call ${e} API`}}}async handleTablePageRequest(t,s){const{PageNo:a=1,PageSize:i=10,OrderByField:r="id",IsAsc:n=!0}=s;try{let s=e.from("public.user_profiles").select("*");const c=(a-1)*i,l=c+i-1;s=s.range(c,l),s=s.order(r,{ascending:n}),t>0&&(s=s.eq("id",t));const{data:o,error:u}=await s;if(u)throw new Error(u.message);return{success:!0,data:{items:o||[],pageNo:a,pageSize:i,totalItems:o?.length||0},message:`Successfully retrieved ${o?.length||0} records`}}catch(c){return{success:!1,error:c.message,message:"Failed to fetch table page data"}}}async handleMigrationRequest(t,s){try{const s=["public.user_profiles","public.stations","public.products","public.orders","public.employees"];return{success:!0,data:{migrationId:t,tableChecks:await Promise.all(s.map(async t=>{try{const{data:s,error:a}=await e.from(t).select("*").limit(1);return{table:t,exists:!a||"PGRST116"!==a.code,error:a?.message}}catch(s){return{table:t,exists:!1,error:s.message}}})),timestamp:(new Date).toISOString()},message:"Migration status checked successfully"}}catch(a){return{success:!1,error:a.message,message:"Migration request failed"}}}async handleHealthCheck(){try{const{data:t,error:s}=await e.from("public.user_profiles").select("count(*)",{count:"exact",head:!0}),a=!s||"PGRST116"===s.code;return{success:a,data:{healthy:a,timestamp:(new Date).toISOString(),supabaseUrl:"https://nehhjsiuhthflfwkfequ.supabase.co",error:s?.message||null},message:a?"System is healthy":"System has issues"}}catch(t){return{success:!1,error:t.message,message:"Health check failed"}}}async handleGenericRequest(e,t,s){return console.log(`Generic API call to ${e} not implemented yet`),{success:!0,data:{endpoint:e,id:t,params:s,timestamp:(new Date).toISOString(),note:"This is a mock response - endpoint not yet implemented"},message:`Mock response for ${e} endpoint`}}async testConnection(){try{return(await this.callApi("health",0,{})).success}catch(e){return console.error("Migration helper connection test failed:",e),!1}}async getMigrationStatus(){return await this.callApi("migration",0,{})}static reset(){t.instance&&(t.instance.initialized=!1,t.instance=null)}}export{t as S};
