import{j as e}from"./radix-ui-woSLwCdF.js";import{r as t}from"./react-core-CKNU0hQt.js";import{y as s,z as a,C as n,f as i,g as r,h as l,e as o,B as c}from"./index-MtEqlP9w.js";import{S as d}from"./supabaseMigrationHelper-DG4-PIqL.js";import"./routing-DcURAnU1.js";import"./utilities-BBdJI3Xi.js";import"./data-management-r38r-ocq.js";import"./animations-CdlE0-Ca.js";class u{static async testConnection(){const e={connected:!1,details:{clientConfigured:!1,databaseReachable:!1,tablesExist:!1,tableCount:0}};try{if(!s)return e.error="Supabase client not initialized",e;e.details.clientConfigured=!0,console.log("Supabase client is configured");const{error:t}=await s.from("information_schema.tables").select("table_name").eq("table_schema","public").limit(1);if(t)return e.error=`Database connection failed: ${t.message}`,e;e.details.databaseReachable=!0,console.log("Database is reachable");const{data:a,error:n}=await s.from("information_schema.tables").select("table_name").eq("table_schema","public").in("table_name",["stations","user_profiles","products","employees","sales_reports","vendors","orders","licenses","sms_settings","sms_contacts","sms_history"]);if(n)return e.error=`Error checking tables: ${n.message}`,e;e.details.tableCount=a?.length||0,e.details.tablesExist=(a?.length||0)>0,e.details.tablesExist?(console.log(`Found ${e.details.tableCount} of our tables`),e.connected=!0):(e.error="No application tables found - database schema not set up yet",console.log("No application tables found - run the database schema setup"))}catch(t){e.error=`Connection test failed: ${t instanceof Error?t.message:String(t)}`,console.error("Supabase connection test failed:",t)}return e}static async testTableOperation(e="stations"){try{const{error:t,count:a}=await s.from(e).select("*",{count:"exact",head:!0});return t?{success:!1,error:t.message}:{success:!0,count:a||0}}catch(t){return{success:!1,error:t instanceof Error?t.message:String(t)}}}static async getConnectionStatus(){const e=await this.testConnection();return e.connected?`🟢 SUPABASE CONNECTED - ${e.details.tableCount} tables found`:e.details.databaseReachable?"🟡 SUPABASE REACHABLE - Database setup needed":e.details.clientConfigured?"🟠 SUPABASE CLIENT OK - Database connection failed":"🔴 SUPABASE NOT CONFIGURED"}static async logConnectionStatus(){console.log("\n=== SUPABASE CONNECTION TEST ===");const e=await this.testConnection();console.log("Client Configured: "+(e.details.clientConfigured?"YES":"NO")),console.log("Database Reachable: "+(e.details.databaseReachable?"YES":"NO")),console.log(`Tables Exist: ${e.details.tablesExist?"YES":"NO"} (${e.details.tableCount}/11)`),console.log("Overall Status: "+(e.connected?"CONNECTED":"NOT READY")),e.error&&console.log(`Error: ${e.error}`),!e.connected&&e.details.clientConfigured&&(console.log("\n💡 NEXT STEPS:"),console.log("1. Set up database tables: Run the SQL schema in Supabase dashboard"),console.log("2. Import your existing data"),console.log("3. Test the connection again")),console.log("================================\n")}}const E="https://nehhjsiuhthflfwkfequ.supabase.co",T="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5laGhqc2l1aHRoZmxmd2tmZXF1Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzAxMzE3NSwiZXhwIjoyMDY4NTg5MTc1fQ.7naT6l_oNH8VI5MaEKgJ19PoYw1EErv6-ftkEin12wE",A=a(E,T,{auth:{autoRefreshToken:!1,persistSession:!1}});class m{steps=[];onProgress;constructor(e){this.onProgress=e}updateStep(e,t,s,a){const n=this.steps.findIndex(t=>t.step===e);n>=0?this.steps[n]={step:e,status:t,message:s,error:a}:this.steps.push({step:e,status:t,message:s,error:a}),console.log(`[${t.toUpperCase()}] ${e}: ${s}`),this.onProgress&&this.onProgress([...this.steps])}async testConnection(){this.updateStep("Connection Test","running","Testing Supabase connection...");try{const{error:e}=await A.from("nonexistent_table").select("*").limit(1);return e&&e.message.includes("does not exist")?(this.updateStep("Connection Test","completed","Connection successful"),!0):e?(this.updateStep("Connection Test","failed","Connection failed",e.message),!1):(this.updateStep("Connection Test","completed","Connection successful"),!0)}catch(e){return this.updateStep("Connection Test","failed","Connection failed",e instanceof Error?e.message:"Unknown error"),!1}}async createTables(){this.updateStep("Table Creation","running","Creating database tables...");const e=[{name:"stations",sql:"\n          CREATE TABLE IF NOT EXISTS public.stations (\n            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n            station_id VARCHAR(50) UNIQUE NOT NULL,\n            name VARCHAR(255) NOT NULL,\n            address TEXT,\n            city VARCHAR(100),\n            state VARCHAR(50),\n            zip_code VARCHAR(20),\n            phone VARCHAR(20),\n            email VARCHAR(255),\n            status VARCHAR(20) DEFAULT 'active',\n            manager_id UUID,\n            latitude DECIMAL(10, 8),\n            longitude DECIMAL(11, 8),\n            fuel_types JSONB DEFAULT '[]',\n            pump_count INTEGER DEFAULT 0,\n            active BOOLEAN DEFAULT true,\n            notes TEXT,\n            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n          );\n        "},{name:"user_profiles",sql:"\n          CREATE TABLE IF NOT EXISTS public.user_profiles (\n            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n            user_id UUID,\n            email VARCHAR(255) UNIQUE NOT NULL,\n            first_name VARCHAR(100),\n            last_name VARCHAR(100),\n            role VARCHAR(20) DEFAULT 'viewer',\n            permissions JSONB DEFAULT '{}',\n            station_access JSONB DEFAULT '[]',\n            is_active BOOLEAN DEFAULT true,\n            last_login TIMESTAMP WITH TIME ZONE,\n            phone VARCHAR(20),\n            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n          );\n        "},{name:"employees",sql:"\n          CREATE TABLE IF NOT EXISTS public.employees (\n            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n            employee_id VARCHAR(50) UNIQUE NOT NULL,\n            first_name VARCHAR(100) NOT NULL,\n            last_name VARCHAR(100) NOT NULL,\n            email VARCHAR(255),\n            phone VARCHAR(20),\n            position VARCHAR(100),\n            department VARCHAR(100),\n            station_id UUID REFERENCES public.stations(id),\n            hire_date DATE,\n            termination_date DATE,\n            salary DECIMAL(10, 2),\n            hourly_rate DECIMAL(8, 2),\n            is_active BOOLEAN DEFAULT true,\n            emergency_contact JSONB DEFAULT '{}',\n            notes TEXT,\n            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n          );\n        "},{name:"audit_logs",sql:"\n          CREATE TABLE IF NOT EXISTS public.audit_logs (\n            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n            user_id UUID,\n            user_email VARCHAR(255),\n            action VARCHAR(100) NOT NULL,\n            table_name VARCHAR(100),\n            record_id VARCHAR(100),\n            old_values JSONB,\n            new_values JSONB,\n            ip_address INET,\n            user_agent TEXT,\n            session_id VARCHAR(255),\n            severity VARCHAR(20) DEFAULT 'low',\n            success BOOLEAN DEFAULT true,\n            error_message TEXT,\n            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n          );\n        "}];let t=0,s=0;for(const n of e)try{const{error:e}=await A.rpc("exec_sql",{query:n.sql});e?(console.error(`Failed to create table ${n.name}:`,e),s++):t++}catch(a){console.error(`Error creating table ${n.name}:`,a),s++}return 0===s?(this.updateStep("Table Creation","completed",`Successfully created ${t} core tables`),!0):(this.updateStep("Table Creation","failed",`Created ${t}, failed ${s}`,"Some tables failed to create"),!1)}async executeFullSchema(){this.updateStep("Schema Execution","running","Executing complete database schema...");try{const e=await fetch(`${E}/rest/v1/rpc/exec_sql`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${T}`,apikey:T},body:JSON.stringify({query:"\n      -- Enable UUID extension\n      CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n      \n      -- Create stations table\n      CREATE TABLE IF NOT EXISTS public.stations (\n        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n        station_id VARCHAR(50) UNIQUE NOT NULL,\n        name VARCHAR(255) NOT NULL,\n        address TEXT,\n        city VARCHAR(100),\n        state VARCHAR(50),\n        zip_code VARCHAR(20),\n        phone VARCHAR(20),\n        email VARCHAR(255),\n        status VARCHAR(20) DEFAULT 'active',\n        manager_id UUID,\n        latitude DECIMAL(10, 8),\n        longitude DECIMAL(11, 8),\n        fuel_types JSONB DEFAULT '[]',\n        pump_count INTEGER DEFAULT 0,\n        active BOOLEAN DEFAULT true,\n        notes TEXT,\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n      );\n\n      -- Create user_profiles table\n      CREATE TABLE IF NOT EXISTS public.user_profiles (\n        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n        user_id UUID,\n        email VARCHAR(255) UNIQUE NOT NULL,\n        first_name VARCHAR(100),\n        last_name VARCHAR(100),\n        role VARCHAR(20) DEFAULT 'viewer',\n        permissions JSONB DEFAULT '{}',\n        station_access JSONB DEFAULT '[]',\n        is_active BOOLEAN DEFAULT true,\n        last_login TIMESTAMP WITH TIME ZONE,\n        phone VARCHAR(20),\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n      );\n\n      -- Create employees table\n      CREATE TABLE IF NOT EXISTS public.employees (\n        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n        employee_id VARCHAR(50) UNIQUE NOT NULL,\n        first_name VARCHAR(100) NOT NULL,\n        last_name VARCHAR(100) NOT NULL,\n        email VARCHAR(255),\n        phone VARCHAR(20),\n        position VARCHAR(100),\n        department VARCHAR(100),\n        station_id UUID REFERENCES public.stations(id),\n        hire_date DATE,\n        termination_date DATE,\n        salary DECIMAL(10, 2),\n        hourly_rate DECIMAL(8, 2),\n        is_active BOOLEAN DEFAULT true,\n        emergency_contact JSONB DEFAULT '{}',\n        notes TEXT,\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n      );\n\n      -- Create audit_logs table\n      CREATE TABLE IF NOT EXISTS public.audit_logs (\n        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n        user_id UUID,\n        user_email VARCHAR(255),\n        action VARCHAR(100) NOT NULL,\n        table_name VARCHAR(100),\n        record_id VARCHAR(100),\n        old_values JSONB,\n        new_values JSONB,\n        ip_address INET,\n        user_agent TEXT,\n        session_id VARCHAR(255),\n        severity VARCHAR(20) DEFAULT 'low',\n        success BOOLEAN DEFAULT true,\n        error_message TEXT,\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n      );\n\n      -- Create SMS tables\n      CREATE TABLE IF NOT EXISTS public.sms_config (\n        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n        provider VARCHAR(50) NOT NULL DEFAULT 'twilio',\n        api_key VARCHAR(255),\n        api_secret VARCHAR(255),\n        from_number VARCHAR(20),\n        is_active BOOLEAN DEFAULT true,\n        settings JSONB DEFAULT '{}',\n        rate_limit INTEGER DEFAULT 100,\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n      );\n\n      CREATE TABLE IF NOT EXISTS public.sms_history (\n        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n        to_number VARCHAR(20) NOT NULL,\n        from_number VARCHAR(20),\n        message TEXT NOT NULL,\n        status VARCHAR(20) DEFAULT 'pending',\n        provider VARCHAR(50) DEFAULT 'twilio',\n        provider_id VARCHAR(255),\n        cost DECIMAL(8, 4),\n        error_message TEXT,\n        sent_at TIMESTAMP WITH TIME ZONE,\n        delivered_at TIMESTAMP WITH TIME ZONE,\n        station_id UUID REFERENCES public.stations(id),\n        user_id UUID,\n        campaign_id VARCHAR(100),\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n      );\n\n      -- Create indexes\n      CREATE INDEX IF NOT EXISTS idx_stations_station_id ON public.stations(station_id);\n      CREATE INDEX IF NOT EXISTS idx_user_profiles_email ON public.user_profiles(email);\n      CREATE INDEX IF NOT EXISTS idx_employees_employee_id ON public.employees(employee_id);\n      CREATE INDEX IF NOT EXISTS idx_audit_logs_created_at ON public.audit_logs(created_at);\n    "})});if(e.ok)return this.updateStep("Schema Execution","completed","Database schema executed successfully"),!0;{const t=await e.text();return this.updateStep("Schema Execution","failed","Schema execution failed",t),!1}}catch(e){return this.updateStep("Schema Execution","failed","Schema execution failed",e instanceof Error?e.message:"Unknown error"),!1}}async verifyTables(){this.updateStep("Table Verification","running","Verifying created tables...");const e=["public.stations","public.user_profiles","public.employees","public.audit_logs","public.sms_config","public.sms_history"];let t=0;for(const n of e)try{const{data:e,error:s}=await A.from(n).select("*").limit(1);s&&!s.message.includes("Results contain 0 rows")||t++}catch(a){}const s=t===e.length;return this.updateStep("Table Verification",s?"completed":"failed",`Found ${t}/${e.length} tables`,s?void 0:"Some tables are missing"),{success:s,tablesFound:t,totalTables:e.length}}async insertSampleData(){this.updateStep("Sample Data","running","Inserting sample data...");try{const{error:e}=await A.from("public.stations").insert([{station_id:"STATION_001",name:"Main Street Gas Station",address:"123 Main Street",city:"Springfield",state:"IL",zip_code:"62701",phone:"(217) 555-0123",email:"manager@mainstreetgas.com",status:"active"}]);if(e)return this.updateStep("Sample Data","failed","Failed to insert sample station",e.message),!1;const{error:t}=await A.from("public.user_profiles").insert([{email:"admin@dfsportal.com",first_name:"Admin",last_name:"User",role:"admin",permissions:{all:!0},station_access:["STATION_001"],is_active:!0}]);return t?(this.updateStep("Sample Data","failed","Failed to insert sample user",t.message),!1):(this.updateStep("Sample Data","completed","Sample data inserted successfully"),!0)}catch(e){return this.updateStep("Sample Data","failed","Failed to insert sample data",e instanceof Error?e.message:"Unknown error"),!1}}async runCompleteMigration(){console.log("Starting Automatic Supabase Migration...");if(!(await this.testConnection()))return!1;if(!(await this.executeFullSchema())){if(!(await this.createTables()))return!1}return!!(await this.verifyTables()).success&&(await this.insertSampleData(),console.log("Migration completed successfully!"),!0)}getProgress(){return[...this.steps]}}function p(){const[s,a]=t.useState(null),[E,T]=t.useState(!1),[A,p]=t.useState(null),[h,N]=t.useState([]),[g,R]=t.useState(!1);t.useEffect(()=>{const e=d.getInstance();p(e),I()},[]);const I=async()=>{T(!0);try{const e=await u.testConnection();a(e),await u.logConnectionStatus()}catch(e){console.error("Connection test failed:",e)}finally{T(!1)}};return e.jsxs("div",{className:"container mx-auto p-6 space-y-6",children:[e.jsxs(n,{children:[e.jsx(i,{children:e.jsxs(r,{className:"flex items-center justify-between",children:[e.jsx("span",{children:"🚀 Supabase Connection Status"}),s?s.connected?e.jsx(c,{variant:"default",className:"bg-green-500",children:"🟢 CONNECTED"}):s.details.databaseReachable?e.jsx(c,{variant:"secondary",className:"bg-yellow-500 text-black",children:"🟡 SETUP NEEDED"}):s.details.clientConfigured?e.jsx(c,{variant:"secondary",className:"bg-orange-500",children:"🟠 CONFIG ERROR"}):e.jsx(c,{variant:"destructive",children:"🔴 NOT CONFIGURED"}):e.jsx(c,{variant:"secondary",children:"Testing..."})]})}),e.jsxs(l,{className:"space-y-4",children:[s&&e.jsxs("div",{className:"grid grid-cols-2 md:grid-cols-4 gap-4",children:[e.jsxs("div",{className:"text-center",children:[e.jsx("div",{className:"text-2xl",children:s.details.clientConfigured?"✅":"❌"}),e.jsx("div",{className:"text-sm text-gray-600",children:"Client Configured"})]}),e.jsxs("div",{className:"text-center",children:[e.jsx("div",{className:"text-2xl",children:s.details.databaseReachable?"✅":"❌"}),e.jsx("div",{className:"text-sm text-gray-600",children:"Database Reachable"})]}),e.jsxs("div",{className:"text-center",children:[e.jsx("div",{className:"text-2xl",children:s.details.tablesExist?"✅":"❌"}),e.jsx("div",{className:"text-sm text-gray-600",children:"Tables Exist"})]}),e.jsxs("div",{className:"text-center",children:[e.jsxs("div",{className:"text-2xl font-bold",children:[s.details.tableCount,"/11"]}),e.jsx("div",{className:"text-sm text-gray-600",children:"Tables Found"})]})]}),s?.error&&e.jsxs("div",{className:"bg-red-50 border border-red-200 rounded p-4",children:[e.jsx("h4",{className:"font-medium text-red-800",children:"Error:"}),e.jsx("p",{className:"text-red-700 text-sm mt-1",children:s.error})]}),e.jsxs("div",{className:"flex gap-4",children:[e.jsx(o,{onClick:I,disabled:E,variant:"outline",children:E?"Testing...":"🔄 Test Connection"}),e.jsx(o,{onClick:async()=>{if(A){console.log("\n=== TESTING MIGRATION HELPER ===");try{const e=await A.callApi("tablePage",12599,{PageNo:1,PageSize:5,OrderByField:"id",IsAsc:!0});console.log("Migration Helper Test Result:",e),alert("Migration helper test completed - check browser console for details")}catch(e){console.error("Migration helper test failed:",e),alert("Migration helper test failed - check browser console for details")}}},variant:"outline",children:"🧪 Test Migration Helper"}),e.jsx(o,{onClick:async()=>{R(!0),N([]);const e=new m(e=>{N(e)});try{await e.runCompleteMigration()?(alert("🎉 Migration completed successfully! Refresh the page to see updated connection status."),await I()):alert("⚠️ Migration completed with issues. Check the progress below for details.")}catch(t){console.error("Migration failed:",t),alert("❌ Migration failed. Check browser console for details.")}finally{R(!1)}},disabled:g,className:"bg-green-600 hover:bg-green-700 text-white",children:g?"🔄 Running Migration...":"🚀 Run Automatic Migration"})]}),!s?.connected&&s?.details.clientConfigured&&e.jsxs("div",{className:"bg-blue-50 border border-blue-200 rounded p-4",children:[e.jsx("h4",{className:"font-medium text-blue-800",children:"📋 Next Steps:"}),e.jsxs("ol",{className:"text-blue-700 text-sm mt-2 list-decimal list-inside space-y-1",children:[e.jsxs("li",{children:["Go to your Supabase dashboard: ",e.jsx("a",{href:"https://app.supabase.com/project/nehhjsiuhthflfwkfequ",target:"_blank",className:"underline",children:"Open Dashboard"})]}),e.jsx("li",{children:"Go to SQL Editor"}),e.jsxs("li",{children:["Run the schema file: ",e.jsx("code",{className:"bg-blue-100 px-1 rounded",children:"src/database/supabase-schema.sql"})]}),e.jsx("li",{children:"Refresh this page to test again"})]})]})]})]}),h.length>0&&e.jsxs(n,{children:[e.jsx(i,{children:e.jsx(r,{children:"🔄 Migration Progress"})}),e.jsx(l,{children:e.jsx("div",{className:"space-y-3",children:h.map((t,s)=>e.jsxs("div",{className:"flex items-center space-x-3 p-3 rounded-lg bg-gray-50",children:[e.jsxs("div",{className:"flex-shrink-0",children:["completed"===t.status&&e.jsx("span",{className:"text-green-500 text-lg",children:"✅"}),"failed"===t.status&&e.jsx("span",{className:"text-red-500 text-lg",children:"❌"}),"running"===t.status&&e.jsx("span",{className:"text-blue-500 text-lg",children:"🔄"}),"pending"===t.status&&e.jsx("span",{className:"text-gray-400 text-lg",children:"⏳"})]}),e.jsxs("div",{className:"flex-1",children:[e.jsx("div",{className:"font-medium text-sm",children:t.step}),e.jsx("div",{className:"text-sm text-gray-600",children:t.message}),t.error&&e.jsxs("div",{className:"text-xs text-red-600 mt-1",children:["Error: ",t.error]})]})]},s))})})]}),e.jsxs(n,{children:[e.jsx(i,{children:e.jsx(r,{children:"🔧 Migration Information"})}),e.jsxs(l,{children:[e.jsxs("div",{className:"space-y-2 text-sm",children:[e.jsxs("p",{children:[e.jsx("strong",{children:"Migration Status:"})," Infrastructure Complete ✅"]}),e.jsxs("p",{children:[e.jsx("strong",{children:"Supabase URL:"})," https://nehhjsiuhthflfwkfequ.supabase.co"]}),e.jsxs("p",{children:[e.jsx("strong",{children:"Fallback Behavior:"})," Currently using original database until Supabase setup is complete"]}),e.jsxs("p",{children:[e.jsx("strong",{children:"Tables to Create:"})," 11 tables with Row Level Security"]})]}),e.jsxs("div",{className:"mt-4 p-4 bg-gray-50 rounded",children:[e.jsx("h4",{className:"font-medium mb-2",children:"🕒 Why you see old data:"}),e.jsxs("ul",{className:"text-sm space-y-1 list-disc list-inside",children:[e.jsxs("li",{children:["Migration is designed with ",e.jsx("strong",{children:"fallback protection"})]}),e.jsx("li",{children:"If Supabase tables don't exist, it uses the original database"}),e.jsx("li",{children:"Once you set up the Supabase database, it will automatically switch"}),e.jsx("li",{children:"This ensures zero downtime during migration"})]})]})]})]})]})}export{p as default};
