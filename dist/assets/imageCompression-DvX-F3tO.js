const e=e=>e.type.startsWith("image/"),t=e=>{if(0===e)return"0 Bytes";const t=Math.floor(Math.log(e)/Math.log(1024));return parseFloat((e/Math.pow(1024,t)).toFixed(2))+" "+["Bytes","KB","MB","GB"][t]},i=(e,t)=>new Promise((i,o)=>{const{width:r,height:a}=((e,t,i)=>{if(!i||e<=i&&t<=i)return{width:e,height:t};const o=e/t;return e>t?{width:i,height:Math.round(i/o)}:{width:Math.round(i*o),height:i}})(e.naturalWidth,e.naturalHeight,t.maxWidthOrHeight),s=((e,t)=>{const i=document.createElement("canvas");return i.width=e,i.height=t,i})(r,a),n=s.getContext("2d");n?(n.imageSmoothingEnabled=!0,n.imageSmoothingQuality="high",n.drawImage(e,0,0,r,a),s.toBlob(e=>{e?i(e):o(new Error("Failed to compress image"))},"image/jpeg",t.quality||.8)):o(new Error("Could not get canvas context"))}),o=async(t,o)=>{const r={...(()=>{try{const e=localStorage.getItem("imageCompressionSettings");if(e){const t=JSON.parse(e);return{maxSizeMB:t.maxSizeMB||1,maxWidthOrHeight:t.maxResolution||1920,quality:t.quality||.8,initialQuality:t.quality||.8,useWebWorker:!1,alwaysKeepResolution:!1}}}catch(e){console.error("Failed to load compression settings:",e)}return{maxSizeMB:1,maxWidthOrHeight:1920,quality:.8,initialQuality:.8,useWebWorker:!1,alwaysKeepResolution:!1}})(),...o},a=t.size,s=r.maxSizeMB,n=1024*s*1024;if(!(()=>{try{const e=localStorage.getItem("imageCompressionSettings");if(e)return!1!==JSON.parse(e).enabled}catch(e){console.error("Failed to load compression settings:",e)}return!0})())return{file:t,originalSize:a,compressedSize:a,compressionRatio:1,wasCompressed:!1};if(!e(t))return{file:t,originalSize:a,compressedSize:a,compressionRatio:1,wasCompressed:!1};if(!(()=>{try{const e=localStorage.getItem("imageCompressionSettings");return!!e&&JSON.parse(e).autoCompress}catch{return!1}})()&&a<=n)return{file:t,originalSize:a,compressedSize:a,compressionRatio:1,wasCompressed:!1};try{const e=await(e=>new Promise((t,i)=>{const o=new Image;o.onload=()=>t(o),o.onerror=()=>i(new Error("Failed to load image")),o.src=URL.createObjectURL(e)}))(t),o=await(async(e,t,o)=>{let r,a=o.initialQuality||.8,s=0;const n=1024*t*1024;do{if(r=await i(e,{...o,quality:a}),r.size<=n||s>=10)break;a=Math.max(.1,a-.1),s++}while(s<10);return r})(e,s,r),n=new File([o],t.name.replace(/\.[^/.]+$/,".jpg"),{type:"image/jpeg",lastModified:Date.now()}),l=n.size,c=a/l;return URL.revokeObjectURL(e.src),{file:n,originalSize:a,compressedSize:l,compressionRatio:c,wasCompressed:!0}}catch(l){return console.error("Image compression failed:",l),{file:t,originalSize:a,compressedSize:a,compressionRatio:1,wasCompressed:!1}}};export{o as c,t as f,e as i};
